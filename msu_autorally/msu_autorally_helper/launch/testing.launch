<?xml version="1.0"?>
<launch>

	<!-- GAZEBO WORLD -->
	<env name="GAZEBO_MODEL_PATH" value="$(find autorally_description)"/>
	<env name="GAZEBO_RESOURCE_PATH" value="$(find autorally_description)"/>
	<arg name="namespace" default="autorally_platform"/>
	<arg name="world_name" default="model://urdf/empty_sky_AR.world"/>
	<arg name="cmd_timeout" default="0.5"/>
	<arg name="gui" default="true"/>
	<arg name="spawn_track" default="true"/>
	
	<group ns="$(arg namespace)">
		<!-- Create the world. -->
		<include file="$(find autorally_gazebo)/launch/autoRallyTrackWorld_scaled.launch">
			<arg name="world_name" value="$(arg world_name)"/>
			<arg name="namespace" value="$(arg namespace)" />
			<arg name="gui" value="$(arg gui)"/>
			<arg name="spawn_track" value="$(arg spawn_track)"/>
		</include>
	</group>
	
	
	
	<!-- PLATFORM -->
	<!-- Spawn the simulated platform model -->
	<include file="$(find msu_autorally_helper)/launch/spawn_autorally_model.launch" />
	
	
	<!-- Start other Autorally controller options -->
	<!--	Note that some of these are dependent on the stateEstimator which is optionally launched from the spawn_autorally_model launch file -->
	<include file="$(find autorally_control)/launch/waypointFollower.launch" />
	<include file="$(find autorally_control)/launch/constantSpeedController.launch" />
	<!-- <include file="$(find msu_autorally_helper)/launch/tele_op_nodelet.launch" /> -->
	<!-- <include file="$(find autorally_control)/launch/joystickController.launch" /> -->
	
	
	<!-- Start the ROS Navigation Stack -->
	<include file="$(find msu_autorally_helper)/launch/autorally_ros_nav_stack.launch" />
	
	
	<!-- Start custom TF helpers to fill out the tf tree from /base_link to /odom -->
	<group ns="msu_tf_helpers">
		<node name="hokuyo_tf_broadcaster" pkg="msu_autorally_helper" type="laser_tf_broadcaster.py"/>
		<!-- <node name="kinect_tf_broadcaster" pkg="msu_autorally_helper" type="laser_tf_broadcaster.py"/> --> <!-- Note this transform has to be rotated yet! -->
		
		<!-- odom_to_base.. uses info derived from sensors on the platform. gazebo_model state uses information from simulation enviroment.
					have to use odom_to_base.. for the physical platform.
					gazebo_model states gets better performance in simulation. -->
		<!-- <node name="odom_to_baselink_tf_broadcaster" pkg="msu_autorally_helper" type="odom_to_baselink_tf_broadcaster.py"/> --> <!-- stateEstimator must be running for this -->
		<node name="gazebo_model_states_to_baselink_tf_broadcaster" pkg="msu_autorally_helper" type="gazebo_model_state_to_baselink_tf_broadcaster.py"/>
	</group>
	
	
	<!-- Start utility monitors -->
	<!-- <include file="$(find msu_autorally_helper)/launch/autorally_utility_monitors.launch" /> -->
	
</launch>
